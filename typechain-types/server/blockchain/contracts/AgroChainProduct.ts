/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace AgroChainProduct {
  export type ProductStruct = {
    id: string;
    batchNumber: string;
    name: string;
    category: string;
    producer: AddressLike;
    timestamp: BigNumberish;
    isVerified: boolean;
  };

  export type ProductStructOutput = [
    id: string,
    batchNumber: string,
    name: string,
    category: string,
    producer: string,
    timestamp: bigint,
    isVerified: boolean
  ] & {
    id: string;
    batchNumber: string;
    name: string;
    category: string;
    producer: string;
    timestamp: bigint;
    isVerified: boolean;
  };

  export type SupplyChainStageStruct = {
    id: string;
    productId: string;
    stageType: string;
    handler: AddressLike;
    location: string;
    timestamp: BigNumberish;
    notes: string;
    status: string;
  };

  export type SupplyChainStageStructOutput = [
    id: string,
    productId: string,
    stageType: string,
    handler: string,
    location: string,
    timestamp: bigint,
    notes: string,
    status: string
  ] & {
    id: string;
    productId: string;
    stageType: string;
    handler: string;
    location: string;
    timestamp: bigint;
    notes: string;
    status: string;
  };

  export type TransactionStruct = {
    id: string;
    productId: string;
    from: AddressLike;
    to: AddressLike;
    txType: string;
    quantity: BigNumberish;
    price: BigNumberish;
    timestamp: BigNumberish;
  };

  export type TransactionStructOutput = [
    id: string,
    productId: string,
    from: string,
    to: string,
    txType: string,
    quantity: bigint,
    price: bigint,
    timestamp: bigint
  ] & {
    id: string;
    productId: string;
    from: string;
    to: string;
    txType: string;
    quantity: bigint;
    price: bigint;
    timestamp: bigint;
  };

  export type VerificationStruct = {
    id: string;
    productId: string;
    verifier: AddressLike;
    verificationType: string;
    result: string;
    timestamp: BigNumberish;
    validUntil: BigNumberish;
  };

  export type VerificationStructOutput = [
    id: string,
    productId: string,
    verifier: string,
    verificationType: string,
    result: string,
    timestamp: bigint,
    validUntil: bigint
  ] & {
    id: string;
    productId: string;
    verifier: string;
    verificationType: string;
    result: string;
    timestamp: bigint;
    validUntil: bigint;
  };
}

export interface AgroChainProductInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createProduct"
      | "getProduct"
      | "getProductStages"
      | "getProductTransactions"
      | "getProductVerifications"
      | "owner"
      | "recordStage"
      | "recordTransaction"
      | "recordVerification"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "ProductCreated"
      | "StageRecorded"
      | "TransactionRecorded"
      | "VerificationRecorded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createProduct",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "getProduct", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getProductStages",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductTransactions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductVerifications",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordStage",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordTransaction",
    values: [string, string, AddressLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordVerification",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductStages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductVerifications",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordStage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductCreatedEvent {
  export type InputTuple = [
    id: string,
    batchNumber: string,
    name: string,
    producer: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    batchNumber: string,
    name: string,
    producer: string
  ];
  export interface OutputObject {
    id: string;
    batchNumber: string;
    name: string;
    producer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StageRecordedEvent {
  export type InputTuple = [
    id: string,
    productId: string,
    stageType: string,
    handler: AddressLike
  ];
  export type OutputTuple = [
    id: string,
    productId: string,
    stageType: string,
    handler: string
  ];
  export interface OutputObject {
    id: string;
    productId: string;
    stageType: string;
    handler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionRecordedEvent {
  export type InputTuple = [
    id: string,
    productId: string,
    from: AddressLike,
    to: AddressLike,
    txType: string
  ];
  export type OutputTuple = [
    id: string,
    productId: string,
    from: string,
    to: string,
    txType: string
  ];
  export interface OutputObject {
    id: string;
    productId: string;
    from: string;
    to: string;
    txType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationRecordedEvent {
  export type InputTuple = [
    id: string,
    productId: string,
    verifier: AddressLike,
    result: string
  ];
  export type OutputTuple = [
    id: string,
    productId: string,
    verifier: string,
    result: string
  ];
  export interface OutputObject {
    id: string;
    productId: string;
    verifier: string;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AgroChainProduct extends BaseContract {
  connect(runner?: ContractRunner | null): AgroChainProduct;
  waitForDeployment(): Promise<this>;

  interface: AgroChainProductInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createProduct: TypedContractMethod<
    [id: string, batchNumber: string, name: string, category: string],
    [void],
    "nonpayable"
  >;

  getProduct: TypedContractMethod<
    [id: string],
    [AgroChainProduct.ProductStructOutput],
    "view"
  >;

  getProductStages: TypedContractMethod<
    [productId: string],
    [AgroChainProduct.SupplyChainStageStructOutput[]],
    "view"
  >;

  getProductTransactions: TypedContractMethod<
    [productId: string],
    [AgroChainProduct.TransactionStructOutput[]],
    "view"
  >;

  getProductVerifications: TypedContractMethod<
    [productId: string],
    [AgroChainProduct.VerificationStructOutput[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recordStage: TypedContractMethod<
    [
      id: string,
      productId: string,
      stageType: string,
      location: string,
      notes: string,
      status: string
    ],
    [void],
    "nonpayable"
  >;

  recordTransaction: TypedContractMethod<
    [
      id: string,
      productId: string,
      to: AddressLike,
      txType: string,
      quantity: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  recordVerification: TypedContractMethod<
    [
      id: string,
      productId: string,
      verificationType: string,
      result: string,
      validUntil: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createProduct"
  ): TypedContractMethod<
    [id: string, batchNumber: string, name: string, category: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [id: string],
    [AgroChainProduct.ProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductStages"
  ): TypedContractMethod<
    [productId: string],
    [AgroChainProduct.SupplyChainStageStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductTransactions"
  ): TypedContractMethod<
    [productId: string],
    [AgroChainProduct.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductVerifications"
  ): TypedContractMethod<
    [productId: string],
    [AgroChainProduct.VerificationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordStage"
  ): TypedContractMethod<
    [
      id: string,
      productId: string,
      stageType: string,
      location: string,
      notes: string,
      status: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordTransaction"
  ): TypedContractMethod<
    [
      id: string,
      productId: string,
      to: AddressLike,
      txType: string,
      quantity: BigNumberish,
      price: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordVerification"
  ): TypedContractMethod<
    [
      id: string,
      productId: string,
      verificationType: string,
      result: string,
      validUntil: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProductCreated"
  ): TypedContractEvent<
    ProductCreatedEvent.InputTuple,
    ProductCreatedEvent.OutputTuple,
    ProductCreatedEvent.OutputObject
  >;
  getEvent(
    key: "StageRecorded"
  ): TypedContractEvent<
    StageRecordedEvent.InputTuple,
    StageRecordedEvent.OutputTuple,
    StageRecordedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionRecorded"
  ): TypedContractEvent<
    TransactionRecordedEvent.InputTuple,
    TransactionRecordedEvent.OutputTuple,
    TransactionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationRecorded"
  ): TypedContractEvent<
    VerificationRecordedEvent.InputTuple,
    VerificationRecordedEvent.OutputTuple,
    VerificationRecordedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProductCreated(string,string,string,address)": TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;
    ProductCreated: TypedContractEvent<
      ProductCreatedEvent.InputTuple,
      ProductCreatedEvent.OutputTuple,
      ProductCreatedEvent.OutputObject
    >;

    "StageRecorded(string,string,string,address)": TypedContractEvent<
      StageRecordedEvent.InputTuple,
      StageRecordedEvent.OutputTuple,
      StageRecordedEvent.OutputObject
    >;
    StageRecorded: TypedContractEvent<
      StageRecordedEvent.InputTuple,
      StageRecordedEvent.OutputTuple,
      StageRecordedEvent.OutputObject
    >;

    "TransactionRecorded(string,string,address,address,string)": TypedContractEvent<
      TransactionRecordedEvent.InputTuple,
      TransactionRecordedEvent.OutputTuple,
      TransactionRecordedEvent.OutputObject
    >;
    TransactionRecorded: TypedContractEvent<
      TransactionRecordedEvent.InputTuple,
      TransactionRecordedEvent.OutputTuple,
      TransactionRecordedEvent.OutputObject
    >;

    "VerificationRecorded(string,string,address,string)": TypedContractEvent<
      VerificationRecordedEvent.InputTuple,
      VerificationRecordedEvent.OutputTuple,
      VerificationRecordedEvent.OutputObject
    >;
    VerificationRecorded: TypedContractEvent<
      VerificationRecordedEvent.InputTuple,
      VerificationRecordedEvent.OutputTuple,
      VerificationRecordedEvent.OutputObject
    >;
  };
}
